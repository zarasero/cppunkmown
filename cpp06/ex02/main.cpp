/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zserobia <zserobia@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/09 15:50:44 by zserobia          #+#    #+#             */
/*   Updated: 2025/03/09 16:29:43 by zserobia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <cstdlib>
#include <ctime>

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
class Base {
public:
    virtual ~Base() {}
};

// –ü—É—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏
class A : public Base {};
class B : public Base {};
class C : public Base {};

// –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ A, B –∏–ª–∏ C
Base * generate(void) {
    int randValue = std::rand() % 3; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 2
    if (randValue == 0)
        return new A();
    else if (randValue == 1)
        return new B();
    else
        return new C();
}

// –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é
void identify(Base* p) {
    if (dynamic_cast<A*>(p)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –∫ A
        std::cout << "A" << std::endl;
    else if (dynamic_cast<B*>(p)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –∫ B
        std::cout << "B" << std::endl;
    else if (dynamic_cast<C*>(p)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –∫ C
        std::cout << "C" << std::endl;
    else
        std::cout << "Unknown type" << std::endl;
}

// –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
void identify(Base& p) {
    try {
        (void)dynamic_cast<A&>(p); // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ A
        std::cout << "A ff" << std::endl;
        return;
    } catch (...) {}
    
    try {
        (void)dynamic_cast<B&>(p); // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ B
        std::cout << "B fff" << std::endl;
        return;
    } catch (...) {}
    
    try {
        (void)dynamic_cast<C&>(p); // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ C
        std::cout << "C ff" << std::endl;
        return;
    } catch (...) {}
    
    std::cout << "Unknown type" << std::endl;
}

/*–ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ if (dynamic_cast<C&>(p))?
–ü–æ—Ç–æ–º—É —á—Ç–æ dynamic_cast –ø—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–∏ –∫ —Å—Å—ã–ª–∫–µ –ª–∏–±–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ª–∏–±–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. 
–û–Ω –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullptr, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—é.*/

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
int main() {
    std::srand(std::time(0)); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    
    Base *ptr = generate(); // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç
    identify(ptr); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é
    identify(*ptr); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å—Å—ã–ª–∫–µ
    
    delete ptr; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    return 0;
}

/*#include <iostream>
#include <typeinfo>

class Base { public: virtual ~Base() {} };
class A : public Base {};
class B : public Base {};

int main() {
    Base* basePtr = new B();
    
    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞—Ç–µ–ª—å
    A* aPtr = dynamic_cast<A*>(basePtr);
    if (aPtr)
        std::cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A* —É—Å–ø–µ—à–Ω–æ\n";
    else
        std::cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A* –Ω–µ —É–¥–∞–ª–æ—Å—å (nullptr)\n";

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É
    try {
        A& aRef = dynamic_cast<A&>(*basePtr);
        std::cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A& —É—Å–ø–µ—à–Ω–æ\n";
    } catch (const std::bad_cast& e) {
        std::cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A& –Ω–µ —É–¥–∞–ª–æ—Å—å: " << e.what() << "\n";
    }

    delete basePtr;
    return 0;
}

–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A* –Ω–µ —É–¥–∞–ª–æ—Å—å (nullptr)
–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ A& –Ω–µ —É–¥–∞–ª–æ—Å—å: std::bad_cast
üîπ –í—ã–≤–æ–¥:

dynamic_cast<A*>(basePtr) –≤–µ—Ä–Ω—É–ª nullptr, —Ç–∞–∫ –∫–∞–∫ basePtr –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ B.
dynamic_cast<A&>(*basePtr) –≤—ã–±—Ä–æ—Å–∏–ª std::bad_cast, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–≤–µ—Å—Ç–∏ B –∫ A –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
–≠—Ç–æ –∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º dynamic_cast —Å —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏. üöÄ
*

–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ?
–°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Derived, –Ω–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–≥–æ (basePtr) –∏–º–µ–µ—Ç —Ç–∏–ø Base*.
–ú—ã –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ basePtr (—É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Base) –∫ —Ç–∏–ø—É Derived* —Å –ø–æ–º–æ—â—å—é dynamic_cast.
–ï—Å–ª–∏ basePtr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Derived –∏–ª–∏ –µ–≥–æ –ø–æ–¥—Ç–∏–ø, —Ç–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ, –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å derivedPtr –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Derived.
–ï—Å–ª–∏ basePtr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º Derived, dynamic_cast –≤–µ—Ä–Ω–µ—Ç nullptr, –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º.
–í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Derived.
–ó–∞—á–µ–º –≤–æ–æ–±—â–µ —ç—Ç–æ –Ω—É–∂–Ω–æ?
–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ï—Å–ª–∏ –±—ã –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ–±—ã—á–Ω—ã–π static_cast, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ –º–æ–≥–ª–æ –±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º, –µ—Å–ª–∏ –±—ã —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –±—ã–ª –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞.
–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º: –≠—Ç–æ –≤–∞–∂–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞, –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª–∞—Å—Å–æ–≤. –í—ã –Ω–µ –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫ —Ç–∏–ø—É –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã.
–ü—Ä–∏–º–µ—Ä —Å –æ—à–∏–±–∫–æ–π:
cpp
Copy
Edit
Base* basePtr = new Base();  // —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Base
Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);  // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ Base* –∫ Derived*

if (derivedPtr) {
    cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!" << endl;
} else {
    cout << "–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!" << endl;  // –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ basePtr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Base, –∞ –Ω–µ –Ω–∞ Derived
}
–ó–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä–µ–∫—Ç basePtr —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä Base, –∞ –Ω–µ –Ω–∞ Derived. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ dynamic_cast –≤–µ—Ä–Ω–µ—Ç nullptr, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:
dynamic_cast –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º –∫–ª–∞—Å—Å–∞–º, —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤, –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ.
/